
Overall Sprint Goal (Across 2 Sprints):
To establish the foundational backend and database structures for the core quiz flow integrated with a functional SM-2 spaced repetition engine. This includes recording quiz responses, tracking user performance, calculating spaced repetition schedules, and enabling the retrieval of questions due for review, along with basic API endpoints to support these functions.

Sprint 1: Spaced Repetition Backend Foundation

Sprint Goal: Implement the core database schema for spaced repetition, the SM-2 calculation logic in SQL, and the trigger mechanism for updating user question performance upon quiz response submission. Develop the API endpoint for recording these responses.

User Stories / Features:

As a System, I need a database schema to store spaced repetition data so that user performance and review schedules can be tracked. (Covers Tasks 1, 2)

As a System, I need an SM-2 algorithm implemented in SQL so that I can calculate review intervals and ease factors. (Covers Tasks 3, 4)

As a System, I need to automatically update a user's question performance and next review date whenever they submit an answer so that spaced repetition is integrated into the quiz flow. (Covers Task 5)

As a Developer, I need an API endpoint to record user quiz responses so that this data can trigger the spaced repetition engine. (Covers Task 6)

As a Developer, I need to ensure the core SR database logic is reliable through testing. (Covers Task 7)

Tasks:

Task 1: Database Schema - Spaced Repetition Tables (Aligns with existing tasks #1, #2, #3)

Description: Implement and verify the question_responses, user_question_performance, and adaptive_quiz_sessions tables.

Details:

Confirm columns, types, constraints (PK, FK, CHECK, UNIQUE), and DEFAULT values match supabase_database.sql and database/schema/06_spaced_repetition.sql.

Ensure ON DELETE CASCADE behavior is correctly set for FKs.

Implement/verify updated_at triggers using trigger_set_timestamp function (database/functions/01_utility_functions.sql, database/functions/03_triggers.sql).

Implement RLS policies as defined in database/schema/07_permissions.sql.

Create specified indexes from database/schema/06_spaced_repetition.sql and supabase_database.sql.

Files: database/schema/*, database/functions/*, supabase_database.sql.

Acceptance Criteria: Tables exist with correct schema, constraints, RLS, and triggers are functional.

Task 2: Database Schema - questions Table Update (Aligns with existing task #4)

Description: Add quiz_topic column to the questions table and update data migration.

Details:

Modify database/schema/03_core_tables.sql to include quiz_topic TEXT.

Update enhanced-migrate-quiz-data.js to populate quiz_topic (e.g., from quizzes.quiz_topic or quizzes.id).

Add an index on quiz_topic in database/schema/03_core_tables.sql.

Files: database/schema/03_core_tables.sql, enhanced-migrate-quiz-data.js.

Acceptance Criteria: quiz_topic column exists, is populated correctly by the migration script, and is indexed.

Task 3: SM-2 Algorithm - Core SQL Function (fn_calculate_sm2_review_details) (Aligns with existing task #5)

Description: Implement and test the core SM-2 logic as a SQL function.

Details:

Based on database/functions/02_sm2_algorithm.sql and Python snippet.

Inputs: current_ease_factor, current_interval, repetitions, quality_rating.

Outputs: new_ease_factor, new_interval_days, new_repetitions, next_review_date.

Handle logic for quality_rating < 3, repetitions impact on interval, and EF bounds (1.3 to 2.5).

Files: database/functions/02_sm2_algorithm.sql.

Acceptance Criteria: SQL function correctly calculates SM-2 parameters based on various inputs.

Task 4: SM-2 Algorithm - Wrapper SQL Function (calculate_next_review_date) (Aligns with existing task #6)

Description: Implement a SQL wrapper function for easier SM-2 calculations.

Details:

Based on database/functions/02_sm2_algorithm.sql.

Inputs: p_user_id, p_question_id, p_quality_rating.

Fetches current performance data or uses defaults. Calls fn_calculate_sm2_review_details.

Files: database/functions/02_sm2_algorithm.sql.

Acceptance Criteria: Wrapper function correctly interfaces with the core SM-2 function and user performance data.

Task 5: Performance Tracking - Database Trigger (fn_update_user_question_performance) (Aligns with existing task #7)

Description: Implement and attach the database trigger to question_responses for automatic performance updates.

Details:

Verify logic in database/functions/03_triggers.sql.

Trigger AFTER INSERT ON question_responses.

Determine quality_rating (use logic from supabase_database.sql as a starting point).

Call calculate_next_review_date.

Calculate priority_score using the Python formula: (incorrect_streak * 10) + (3 - ease_factor) + (5 if last_attempt_incorrect else 0).

INSERT or UPDATE (ON CONFLICT) user_question_performance table.

Files: database/functions/03_triggers.sql.

Acceptance Criteria: user_question_performance is correctly updated after a new response is inserted.

Task 6: API - Quiz Response Recording Endpoint (POST /api/quiz/response) (Aligns with existing task #8)

Description: Create/Update the API endpoint for recording quiz responses.

Details:

Based on app/api/quiz/response/route.ts.

Inputs: question_id, user_answer_data, is_correct, response_time_ms, etc.

Authenticate user, validate inputs.

Insert into question_responses. The DB trigger handles SR updates.

Return relevant data (e.g., new performance metrics).

Files: app/api/quiz/response/route.ts.

Acceptance Criteria: Endpoint records responses; SR data is updated in the backend.

Task 7: Testing - Core SR Database Logic (Aligns with existing task #13 & part of #14)

Description: Unit test SQL functions (fn_calculate_sm2_review_details, calculate_next_review_date) and integration test the fn_update_user_question_performance trigger.

Details:

Write SQL-based tests (e.g., using psql scripts or a framework like pgTAP if feasible).

Verify function outputs for diverse scenarios.

Test trigger by inserting sample data into question_responses and checking user_question_performance.

Files: New SQL test scripts in __tests__/spaced-repetition/ or a database/tests/ directory.

Acceptance Criteria: Core SM-2 calculations and trigger logic are verified to be correct.

Sprint 2: Active Recall & Dashboard Backend Foundation

Sprint Goal: Implement the backend logic for retrieving questions due for review, including the necessary SQL function and API endpoint. Develop the backend for logging adaptive quiz sessions and the SQL function for initial dashboard statistics.

UserStories / Features:

As a User, I want to be able to get questions that are due for review so I can practice them (Active Recall). (Covers Tasks 8, 9)

As a System, I need to log adaptive quiz sessions so that I can track user engagement with review quizzes. (Covers Task 10)

As a System, I need to calculate user's spaced repetition statistics so they can be displayed on a dashboard. (Covers Tasks 11, 12)

As a Developer, I need to ensure the new API endpoints are functional and the database is optimized. (Covers Tasks 13, 14)

Tasks:

Task 8: Review Logic - get_questions_due_for_review SQL Function (Aligns with existing task #9)

Description: Implement the SQL function to retrieve questions due for review.

Details:

Verify logic in database/functions/02_sm2_algorithm.sql (or a new analytics file).

Parameters: p_user_id, p_quiz_topic_filter, p_limit.

Join questions with user_question_performance (LEFT JOIN).

Filter: (uqp.next_review_date <= NOW() OR uqp.total_attempts = 0 OR uqp.id IS NULL).

Prioritization as per request: ORDER BY priority_score DESC, next_review_date ASC, CASE WHEN total_attempts = 0 THEN 0 ELSE 1 END, difficulty_weight (translate difficulty enum to weight).

Files: database/functions/02_sm2_algorithm.sql (or database/functions/04_analytics.sql).

Acceptance Criteria: Function returns correctly prioritized questions due for review.

Task 9: API - Review Questions Retrieval Endpoint (GET /api/quiz/review-questions) (Aligns with existing task #10)

Description: Create/Update API endpoint for retrieving review questions.

Details:

Based on app/api/quiz/review-questions/route.ts.

Accepts query params: quizTopic, limit.

Authenticates user. Calls get_questions_due_for_review.

Files: app/api/quiz/review-questions/route.ts.

Acceptance Criteria: Endpoint returns questions due for review.

Task 10: Adaptive Sessions - Backend Service & API (POST /api/quiz/adaptive-session) (Aligns with existing tasks #11, #12)

Description: Implement service and API for logging adaptive quiz sessions.

Details:

Service logic in libs/spaced-repetition.ts (using createSpacedRepetitionService).

API Endpoint: POST /api/quiz/adaptive-session (as in app/api/quiz/adaptive-session/route.ts).

Accepts: quiz_topic, question_ids, session_settings. Inserts into adaptive_quiz_sessions.

Files: libs/spaced-repetition.ts, app/api/quiz/adaptive-session/route.ts.

Acceptance Criteria: Adaptive quiz sessions can be logged.

Task 11: Dashboard - get_user_spaced_repetition_stats SQL Function

Description: Implement the SQL function to calculate user SR statistics.

Details:

Verify logic in database/functions/04_analytics.sql.

Calculates metrics as per request: total_questions_reviewed, questions_due_today, questions_due_this_week, average_ease_factor, accuracy_rate, mastered_questions (ease_factor > 2.3 AND interval_days > 30), struggling_questions (incorrect_streak >= 2 OR ease_factor < 1.5).

Files: database/functions/04_analytics.sql.

Acceptance Criteria: Function accurately returns user statistics.

Task 12: API - User Spaced Repetition Stats Endpoint

Description: Create GET /api/user/spaced-repetition-stats endpoint.

Details:

Authenticate user. Call get_user_spaced_repetition_stats SQL function.

Return statistics.

Files: New API route (e.g., app/api/user/stats/spaced-repetition/route.ts).

Acceptance Criteria: Endpoint provides user's SR stats.

Task 13: Testing - API Endpoints & Review Logic (Aligns with existing task #14)

Description: Create integration tests for the new API endpoints and the get_questions_due_for_review SQL function.

Details:

Test GET /api/quiz/review-questions with different parameters and user states.

Test POST /api/quiz/adaptive-session for successful logging.

Test GET /api/user/spaced-repetition-stats for accuracy.

Ensure SQL function get_questions_due_for_review correctly filters and prioritizes.

Files: New test files in __tests__/spaced-repetition/ or __tests__/api/.

Acceptance Criteria: All new API endpoints and core review logic function correctly.

Task 14: Performance Optimization - Database Review & Indexing (Aligns with existing task #15)

Description: Review and optimize database indexes related to SR queries.

Details:

Focus on indexes listed in supabase_database.sql under "PERFORMANCE OPTIMIZATION AND ADDITIONAL INDEXES" (e.g., idx_user_question_performance_user_priority, idx_questions_topic_difficulty).

Verify these are correctly implemented in database/schema/* files.

Analyze query plans for get_questions_due_for_review and fn_update_user_question_performance if possible.

Files: database/schema/*, supabase_database.sql.

Acceptance Criteria: Key SR-related queries are performant.

General Considerations for Both Sprints:

Code Review: All code should be peer-reviewed.

Documentation: Update any relevant internal documentation or comments.

Database Migrations: Ensure run-migrations.js or a similar process can apply schema changes. The provided database/setup.sh script and individual SQL files in database/schema and database/functions are a good way to manage this.

Error Handling: Implement robust error handling in API routes and service functions.

Security: Ensure RLS policies are effective and API endpoints are secure.

Existing Code: Leverage existing structures in app/features/quiz/services (like SpacedRepetitionQuizService) and API routes as much as possible. The current supabase_database.sql is a strong reference; this plan involves modularizing and verifying its components.

