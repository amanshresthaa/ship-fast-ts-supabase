# Spaced Repetition & Active Recall Foundation - Product Requirements Document

## Project Overview
Implement the core database structure and backend logic for tracking user quiz performance, calculating spaced repetition schedules using SM-2 algorithm, and enabling the retrieval of questions due for review.

## Sprint Goal
To implement the core database structure and backend logic for tracking user quiz performance, calculating spaced repetition schedules using SM-2, and enabling the retrieval of questions due for review.

## Key Features & Requirements

### 1. Database Schema Extension
- Implement question_responses table to store detailed user responses
- Implement user_question_performance table to track individual performance over time
- Implement adaptive_quiz_sessions table to log quiz sessions
- Add quiz_topic column to questions table for denormalized access
- Define appropriate RLS policies and triggers for all new tables

### 2. SM-2 Algorithm Implementation
- SQL function fn_calculate_sm2_review_details for core SM-2 calculations
- SQL function calculate_next_review_date as wrapper for SM-2 calculations
- Backend service/utility function encapsulating SM-2 logic in TypeScript
- Support for quality ratings, repetitions, ease factors, and interval calculations

### 3. Quiz Performance Tracking Logic
- Mechanism to record each question response in question_responses table
- Trigger or backend logic to update/create records in user_question_performance
- Integration with SM-2 functions for automatic scheduling updates
- Support for streaks, response times, confidence levels, and priority scoring

### 4. Review Question Retrieval System
- SQL function get_questions_due_for_review for identifying due questions
- Backend API endpoint to expose review question functionality
- Support for filtering by user, topic, and limiting results
- Proper ordering by priority score and next review date

### 5. Adaptive Quiz Session Logging
- Functionality to create records in adaptive_quiz_sessions
- Backend service for logging quiz session creation
- API endpoint for adaptive session management
- Support for session settings and question tracking

### 6. API Endpoints
- POST /api/quiz/response - Record question responses
- GET /api/quiz/review-questions - Retrieve questions due for review
- POST /api/quiz/adaptive-session - Log adaptive quiz sessions

### 7. Testing & Quality Assurance
- Unit tests for SM-2 algorithm implementation
- Integration tests for database triggers and functions
- API endpoint testing for all new endpoints
- Performance testing for database operations
- Security testing for RLS policies

## Technical Requirements

### Database Requirements
- PostgreSQL/Supabase compatibility
- Row Level Security (RLS) implementation
- Proper indexing for performance
- Trigger-based automatic updates
- Foreign key constraints and data integrity

### Backend Requirements
- TypeScript implementation
- Next.js API routes
- Supabase client integration
- Error handling and validation
- Performance optimization

### Performance Requirements
- Efficient query performance for review question retrieval
- Minimal latency for response recording
- Scalable trigger logic for real-time updates
- Optimized database indexes

### Security Requirements
- Row Level Security policies for all new tables
- User authentication and authorization
- Data validation and sanitization
- Secure API endpoint implementation

## Success Criteria
- All database tables created with proper schema and constraints
- SM-2 algorithm correctly implemented and tested
- Quiz response recording and performance tracking functional
- Review question retrieval working with proper filtering and ordering
- All API endpoints implemented and tested
- Comprehensive test coverage for core functionality
- Performance benchmarks met for database operations
- Security policies properly implemented and tested

## Out of Scope
- Full adaptive quiz generation logic (only logging is in scope)
- User-facing UI for spaced repetition features
- Detailed performance metrics display
- Confidence level input UI/logic
- Advanced priority scoring algorithms
- Data migration for existing user answers
- Complex adaptive quiz mixing algorithms

## Acceptance Criteria
- Database schema matches design specifications
- RLS policies are implemented and tested
- All SQL functions are unit-tested and functional
- API endpoints return expected responses with proper error handling
- Business logic for SM-2 updates and review retrieval is implemented
- Code is peer-reviewed and documented
- Integration tests pass for critical user flows
- Performance requirements are met
