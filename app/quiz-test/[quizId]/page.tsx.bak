'use client';

import React from 'react';
import { QuizProvider } from '../../features/quiz/context/QuizContext';
import QuizPage from '../../features/quiz/pages/QuizPage';

  useEffect(() => {
    if (quizId) {
      dispatch({ type: 'LOAD_QUIZ_START' });
      // In a real app, you would call an API route here
      // which internally uses fetchQuizById from quizService.ts.
      // For now, to demonstrate, we are directly calling it.
      // This has implications: quizService.ts uses server-side env vars and Supabase client.
      // This will NOT work directly on the client if quizService.ts is not refactored
      // or if fetchQuizById is not exposed via an API endpoint.
      
      // TEMPORARY: Simulating API call for now for UI structure
      // Replace this with actual API call
      const loadQuiz = async () => {
        try {
          // This direct call to fetchQuizById from client won't work with server-side Supabase client.
          // const quizData = await fetchQuizById(quizId);
          // Instead, this needs to be an API call:
          const response = await fetch(`/api/quiz/${quizId}`);
          if (!response.ok) {
            throw new Error(`Failed to fetch quiz: ${response.statusText}`);
          }
          const quizData = await response.json();

          if (quizData && !quizData.error) {
            dispatch({ type: 'LOAD_QUIZ_SUCCESS', payload: quizData });
          } else {
            dispatch({ type: 'LOAD_QUIZ_FAILURE', payload: quizData.error || 'Failed to load quiz data.' });
          }
        } catch (error: any) {
          console.error("Error fetching quiz data:", error);
          dispatch({ type: 'LOAD_QUIZ_FAILURE', payload: error.message || 'Error fetching quiz.' });
        }
      };
      loadQuiz();
    }
  }, [quizId, dispatch]);

  // Calculate progress for the progress bar
  const progressPercentage = state.questions.length > 0 
    ? ((state.currentQuestionIndex + 1) / state.questions.length) * 100 
    : 0;

  if (state.isLoading) return <div className="flex justify-center items-center min-h-screen bg-custom-light-bg"><p className="text-xl text-custom-dark-blue">Loading quiz...</p></div>;
  if (state.error) return <div className="flex justify-center items-center min-h-screen bg-custom-light-bg"><p className="text-xl text-custom-error">Error: {state.error}</p></div>;
  if (!state.quiz || state.questions.length === 0) return <div className="flex justify-center items-center min-h-screen bg-custom-light-bg"><p className="text-xl text-custom-dark-blue">Quiz not found or no questions available.</p></div>;

  const currentQuestion = state.questions[state.currentQuestionIndex];
  const isLastQuestion = state.questions.length > 0 && state.currentQuestionIndex === state.questions.length - 1;

  if (!currentQuestion && state.isQuizComplete) {
    return (
        <div className="min-h-screen bg-custom-light-bg flex flex-col justify-center items-center p-6 animate-fade-in">
            <div className="container mx-auto p-4 md:p-8 text-center bg-white shadow-shadow-strong rounded-rounded-lg-ref">
                <h1 className="text-3xl md:text-4xl font-bold mb-6 text-custom-success">Quiz Completed!</h1>
                <p className="text-lg md:text-xl text-custom-gray-1 mb-8">You have completed the quiz: <span className="font-semibold">{state.quiz.title}</span>.</p>
                {/* TODO: Display score or summary here */}
                <button 
                    onClick={() => dispatch({ type: 'RESET_QUIZ' })} 
                    className="btn-primary-custom"
                >
                    Take Another Quiz
                </button>
            </div>
        </div>
    );
  }
  if (!currentQuestion) return <div className="flex justify-center items-center min-h-screen bg-custom-light-bg"><p className="text-xl text-custom-dark-blue">No current question available.</p></div>;
  
  // Define button styles based on reference
  const btnBase = "inline-flex items-center justify-center px-8 h-12 border-none rounded-rounded-full font-semibold text-base cursor-pointer transition-all duration-200 relative overflow-hidden";
  const btnSecondaryCustom = `${btnBase} bg-gray-100 text-custom-gray-1 hover:bg-gray-200 hover:-translate-y-0.5`;
  const btnPrimaryCustom = `${btnBase} bg-primary-gradient text-white shadow-lg hover:shadow-xl hover:-translate-y-0.5`;
  // Note: Ripple effect from reference is complex for pure Tailwind; focusing on static/hover styles.

  return (
    <div className="min-h-screen bg-custom-light-bg py-6 px-4 md:px-6">
      <div className="quiz-container max-w-3xl mx-auto">
        <header className="text-center mb-8 animate-fade-in">
          <h1 className="text-3xl md:text-4xl font-bold text-custom-dark-blue mb-3 relative inline-block pb-2">
            {state.quiz.title}
            <span className="absolute left-1/4 bottom-0 w-1/2 h-1 bg-primary-gradient rounded-rounded-full"></span>
          </h1>
          
          <div className="progress-container relative my-8 mx-auto w-full max-w-xl">
            <div className="progress-info flex justify-between mb-2 font-medium text-sm">
              <div className="question-counter bg-primary-gradient text-white py-1 px-4 rounded-rounded-full shadow-shadow-1 text-xs md:text-sm">
                Question {state.currentQuestionIndex + 1} of {state.questions.length}
              </div>
              {/* Score could go here if available: <div className="score-display">Score: ...</div> */}
            </div>
            <div className="progress-bar h-2 bg-gray-200 rounded-rounded-full overflow-hidden shadow-inner">
              <div 
                className="progress-fill h-full bg-primary-gradient rounded-rounded-full transition-all duration-300 ease-out shadow-md"
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
          </div>
        </header>
        
        {/* QuestionCard will be animated with animate-card-appear inside its own component if possible */}
        <QuestionCard question={currentQuestion} />

        <div className="navigation flex flex-col md:flex-row justify-between mt-10 gap-4">
          <button 
            onClick={() => dispatch({ type: 'PREVIOUS_QUESTION' })}
            disabled={state.currentQuestionIndex === 0}
            className={`${btnSecondaryCustom} disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:translate-y-0 w-full md:w-auto`}
          >
            Previous
          </button>
          <button 
            onClick={() => {
              if (isLastQuestion) {
                if (state.userAnswers[currentQuestion.id]) {
                  dispatch({ type: 'COMPLETE_QUIZ' });
                } else {
                  alert("Please submit your answer before finishing the quiz.");
                }
              } else {
                dispatch({ type: 'NEXT_QUESTION' });
              }
            }}
            disabled={isLastQuestion && !state.userAnswers[currentQuestion.id]}
            className={`${btnPrimaryCustom} disabled:opacity-60 disabled:cursor-not-allowed disabled:hover:translate-y-0 w-full md:w-auto`}
          >
            {isLastQuestion ? 'Finish Quiz' : 'Next Question'}
            {/* Icon can be added here */}
            {!isLastQuestion && 
              <svg className="ml-2 w-4 h-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8-8-8z" fill="currentColor"/>
              </svg>
            }
          </button>
        </div>
      </div>
    </div>
  );
};

const QuizPage: React.FC<{ params: { quizId: string } }> = ({ params }) => {
  return (
    <QuizProvider>
      <QuizRunner quizId={params.quizId} />
    </QuizProvider>
  );
};

export default QuizPage; 